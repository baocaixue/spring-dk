rootProject.name = 'spring-dk'

include 'chapter02:hello-world'

//Spring中引入IOC和DI
include 'chapter03:bean-aliases'//bean别名
include 'chapter03:dependency-pull'//依赖拉取
include 'chapter03:cdl'//上下文依赖查找
include 'chapter03:constructor-injection'//构造函数依赖注入
include 'chapter03:setter-injection'//setter依赖注入
include 'chapter03:bean-autowiring'//自动装配
include 'chapter03:bean-inheritance'//bean继承
include 'chapter03:bean-instantiation-mode'//bean实例化模式
include 'chapter03:collections'//复杂一点的注入——集合（map、list、set、properties）
include 'chapter03:field-injection'//字段注入
include 'chapter03:method-injection'//查找方法注入
include 'chapter03:method-replacement'//方法替换
include 'chapter03:nesting'//嵌套
include 'chapter03:simple-types'//简单类型的注入DI

//Spring配置(补充扩展基本IOC)和Spring Boot
//*Bean生命周期——bean创建
include 'chapter04:bean-init-method'//创建bean时执行方法
include 'chapter04:initializing-bean'//实现InitializingBean接口
include 'chapter04:post-construct'//使用JSR-250 @PostConstruct注解
//*Bean生命周期——bean销毁
include 'chapter04:initializing-bean-destroy'//销毁时执行一个方法
include 'chapter04:disposable-bean'//实现DisposableBean接口
include 'chapter04:post-construct-pre-destroy'//使用JSR-250 @PreDestroy注解
include 'chapter04:shutdown-hook'//使用关闭钩子
//*与容器进行交互
include 'chapter04:bean-name-aware'//获取自己名称的bean，实现BeanNameAware接口
include 'chapter04:application-context-aware'//使用ApplicationContextAware
//*FactoryBean
include 'chapter04:factory-bean'//使用FactoryBean(知道factory实现)和直接访问FactoryBean
include 'chapter04:factory-bean-and-factory-method-attributes'//第三方提供的bean，不知道实现，但提供了获取javabean实例的类
include 'chapter04:property-editors'//属性编辑器
include 'chapter04:message-source'//国际化
include 'chapter04:events'//应用程序事件
include 'chapter04:resource'//访问资源
include 'chapter04:java-config'//使用Java类进行配置
include 'chapter04:java-config-message-provider'
include 'chapter04:environment'//environment
include 'chapter04:property-placeholder'
include 'chapter04:jsr330'
include 'chapter04:groovy-config'//使用groovy获取bean
include 'chapter04:groovy-config-java'//使用groovy脚本配置bean——代替xml
include 'chapter04:boot-simple'
include 'chapter04:boot-web'

//AOP
include 'chapter05:aop-hello-world'
include 'chapter05:simple-before-advice'//简单的前置通知——方法执行前将包含方法名的消息写入控制台
include 'chapter05:security'//前置通知示例：前置通知保护方法访问（Spring Security项目）
include 'chapter05:simple-after-returning-advice'//简单的后置返回通知
include 'chapter05:after-returning-advice-keygen'//后置返回通知示例：将错误检查添加到方法中——检查KeyGenerator生成的弱密钥
include 'chapter05:simple-around-advice'//环绕通知——可以将Spring中的环绕通知模型化为拦截器
include 'chapter05:simple-throws-advice'//异常通知——后置异常通知很有用，它允许添加额外的日志记录而无需修改程序代码
include 'chapter05:static-pointcut'//静态切入点
include 'chapter05:dynamic-pointcut'//动态切入点
include 'chapter05:simple-name-matching'//简单方法名称匹配切入点
include 'chapter05:regex-pointcuts'//正则表达式创建切入点
include 'chapter05:aspectj-regex-pointcuts'//AspectJ切入点表达式创建切入点，需要AspectJ库文件——aspectjrt.jar、aspectjweaver.jar
include 'chapter05:annotation-pointcut'//注解匹配切入点
include 'chapter05:proxy-performance'//比较代理性能（JDK代理&&CGLIB代理）
include 'chapter05:cflow-pointcuts'//控制流切入点
include 'chapter05:composable-pointcut'//组合切入点
include 'chapter05:modification-introduction'//引入
/* AOP框架服务 */
include 'chapter05:proxyfactorybean'
include 'chapter05:proxyfactorybean-introduction'
include 'chapter05:aop-namespace'
include 'chapter05:aspectj-annotations'
include 'chapter05:aspectj-boot'

//Spring JDBC
include 'chapter06:plain-jdbc'//本章节的基本数据模型
include 'chapter06:spring-jdbc-annotations'//包含：数据库连接和数据源、建模JDBC操作的Spring类等
include 'chapter06:spring-jdbc-embedded'//包含：嵌入式数据库支持、Dao类中使用DataSource、异常处理、Dao类中初始化JdbcTemplate等
include 'chapter06:spring-jdbc-namedparam'//通过NamedParameterJdbcTemplate使用命名参数
include 'chapter06:spring-jdbc-rowmapper'//使用RowMapper<T>检索域对象
include 'chapter06:spring-jdbc-resultsetextractor'//使用ResultSetExtractor检索嵌套域对象
include 'chapter06:spring-boot-jdbc'

//Hibernate
include 'chapter07:hibernate-base'
include 'chapter07:hibernate-crud'

//JPA
include 'chapter08:jpa-crud'
include 'chapter08:jpa-criteria'//使用JPA2 Criteria（标准） API进行条件查询
include 'chapter08:spring-data-jpa'//spring data jpa基本CrudRepository的使用
include 'chapter08:spring-data-jpa-alt'//spring data jpa高级使用
include 'chapter08:spring-data-jpa-audit'//spring dat jpa审计字段处理功能
include 'chapter08:hibernate-envers'//实体版本的自动化，不是jpa的功能
include 'chapter08:boot-jpa'//spring boot JPA

//事务管理
include 'chapter09:base-dao'
include 'chapter09:transactions-xml'
include 'chapter09:transactions-annotation'



//check if the modules have gradle configuration files
rootProject.children.each { project ->
    project.buildFileName = "${project.name}.gradle"
    assert project.projectDir.isDirectory()
    assert project.buildFile.exists()
    assert project.buildFile.isFile()
}

